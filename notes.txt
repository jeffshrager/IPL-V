==== Proximal issue:

==== Ongoing issues:

* The character/string/symbol/name mess.

There are a lot of issues around string handling, esp. in the single
character case (which the translator uses a lot!) Like, "A" is
represented as the name/symbol "A0", so the equiv. of IPL string-equal
(called, oddly enough: ipl-string-equal) has to do all sorts of
heuristic bending over backwards, as does the cell "getter" (<== ...)
and (cell< ...) which take either a string (cell name) or cell and
return a cell. This problem infuses the whole interpreter. See notes
about strings in the section on "Changes from standard (by the manual)
IPL-V", below. The way I've dealt with this is, in part, to explicitly
name the A, B, ... * . , ' etc in the code as A0 ... *0 ... '0 ... and
this seems to handle more cases, but there are places where it's
trying to do an equal test and it's not clear what's being equated.

* The H0 cleanup problem

There is a running issue about Jfns popping off things from H0, or
not. Some do, some don't, it's sort of assumed tha they do unless
stated otherwise ... or something. It seems that all JFns are supposed
to remove their inputs, e.g., p.10: "...it is understood from the
definition of TEST that J2 will remove both (0) and (1) from HO."

We get to situations like this where there's nothing left on the H0
stack!

```
!![RUN]::>>>>>>>>>> Calling J155 [Print line] (No Args)
BAD EXPRESSION   K51K51|14I+27707Q+27792K52=+27927K51-+27915|14V+27897Q+27792K52
!![RUN]::@466- >>>>>>>>>> {X001R320::X1+28068|40|H0|X1+28069}
!![RUN]::@467- >>>>>>>>>> {X001R330::X1+28069||J15|X1+28070}
!![RUN]::>>>>>>>>>> Calling J15 [ERASE ALL ATTRIBUTES OF (0)]
   (ARG0)=(NIL)
!![JFNS]::J15 clearing the dl of NIL (NIL)
```

In this example someplace around @368 H0 seems to get over-popped. I think this expects
the name of the list ("*101") but I'm not sure. The last time we see
that in H0+ is @368:

==== Debugging Hints:

Look for /14 -- that's where the parser failed. Something went wrong
just above that!

